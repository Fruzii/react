{"version":3,"sources":["imgs/profile_default_pic.png","components/users/User.jsx","components/users/Users.jsx","components/users/UsersContainer.jsx"],"names":["User","props","className","to","user","id","src","photos","small","profile_default_pic","alt","followed","onClick","unfollowUser","disabled","isFollowingInProgress","some","followUser","name","status","key","Users","pagesCount","Math","ceil","state","totalUsersCount","pageSize","pages","i","push","Pagination","count","page","currentPage","onChange","event","value","onPageChanged","siblingCount","isFetching","Preloader","users","map","UsersContainer","history","queryString","parse","this","location","search","Number","requestUsers","pageChangedOnUrl","prevProps","prevState","followingInProgress","React","Component","mapDispatchToProps","setCurrentPage","connect","usersPage","withRouter"],"mappings":"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","file":"static/js/7.62c3fd98.chunk.js","sourcesContent":["export default __webpack_public_path__ + \"static/media/profile_default_pic.33564136.png\";","import './Users.css';\r\nimport { NavLink } from 'react-router-dom';\r\nimport profile_default_pic from '../../imgs/profile_default_pic.png'\r\n\r\nlet User = (props) => {\r\n  \r\n  return (\r\n    <div className=\"users_item\" key={props.user.key}>\r\n      <div className=\"user_profile\">\r\n        <NavLink to={`/profile/${props.user.id}`}>\r\n          <div className=\"post_img users_img\">\r\n            {/* <img src={props.img} alt=\"\" /> */}\r\n            <img src={props.user.photos.small ? props.user.photos.small : profile_default_pic} alt=\"\" />\r\n          </div>\r\n        </NavLink>\r\n        {props.user.followed ?\r\n          <div className=\"user_profile__btn active\" onClick={() => { props.unfollowUser(props.user.id) }}><button disabled={props.isFollowingInProgress.some(id => id === props.user.id)}>unfollow</button></div> :\r\n          <div className=\"user_profile__btn\" onClick={() => { props.followUser(props.user.id) }}><button disabled={props.isFollowingInProgress.some(id => id === props.user.id)}>follow</button></div>}\r\n      </div>\r\n      <div className=\"user_content\">\r\n        <NavLink to={`/profile/${props.user.id}`}>\r\n          <div className=\"user_name\">{props.user.name}</div>\r\n        </NavLink>\r\n        <div className=\"user_status\">{props.user.status}</div>\r\n      </div>\r\n      <div className=\"user_location\">\r\n        {/* <div className=\"\">{props.location.country}</div>\r\n        <div className=\"\">{props.location.city}</div> */}\r\n      </div>\r\n    </div>\r\n  )\r\n}\r\nexport default User\r\n","import './Users.css';\r\nimport Preloader from './../common/Preloader/Preloader';\r\nimport Pagination from '@material-ui/lab/Pagination';\r\nimport User from './User';\r\n// import Pagination from '../common/Pagination/Pagination';\r\n\r\nlet Users = (props) => {\r\n\r\n  let pagesCount = Math.ceil(props.state.totalUsersCount / props.state.pageSize)\r\n\r\n  let pages = []\r\n  for (let i = 1; i <= pagesCount; i++) {\r\n    pages.push(i)\r\n  }\r\n\r\n  const handleChange = (event, value) => {\r\n    props.onPageChanged(value);\r\n  };\r\n\r\n  // let onFollow = (id) => {\r\n  //   props.followingInProgress(true, id)\r\n  //   usersAPI.followUser(id).then(response => {\r\n  //     if (response.data.resultCode === 0) {\r\n  //       (props.followUser(id))\r\n  //     }\r\n  //     props.followingInProgress(false, id)\r\n  //   });\r\n  // }\r\n\r\n  // let onUnFollow = (id) => {\r\n  //   props.followingInProgress(true, id)\r\n  //   usersAPI.unFollowUser(id).then(response => {\r\n  //     if (response.data.resultCode === 0) {\r\n  //       (props.unfollowUser(id))\r\n  //     }\r\n  //     props.followingInProgress(false, id)\r\n  //   });\r\n  // }\r\n  // if (props.state.isFetching) return <Preloader />\r\n  return <div className=\"users\">\r\n    <div className=\"users_inner\">\r\n      <div className=\"profile_title users_title\">Users</div>\r\n      <div className=\"pagination users__pagination\">\r\n        {/* {pages.map(p => {\r\n          return <span className={props.state.currentPage === p && 'active'} onClick={(e) => { props.onPageChanged(p) }}>{p}</span>\r\n        })} */}\r\n      <Pagination\r\n        count={pagesCount}\r\n        page={props.state.currentPage}\r\n        onChange={handleChange}\r\n        siblingCount={4}\r\n      />\r\n      </div>\r\n      {\r\n        props.state.isFetching && <Preloader /> \r\n      }\r\n      {props.state.users.map(user =>\r\n        <User \r\n        user={user}\r\n        followUser={props.followUser}\r\n        unfollowUser={props.unfollowUser}\r\n        isFollowingInProgress={props.state.isFollowingInProgress}\r\n        key={props.key}\r\n        />\r\n      )}\r\n\r\n    </div>\r\n  </div >\r\n}\r\n\r\nexport default Users\r\n","import './Users.css';\r\nimport { followUser, unfollowUser, requestUsers, setCurrentPage } from './../../redux/reducers/usersReducer';\r\nimport { connect } from 'react-redux';\r\nimport React from 'react';\r\nimport Users from './Users';\r\nimport queryString from 'query-string'\r\nimport { withRouter } from 'react-router-dom';\r\n\r\nclass UsersContainer extends React.Component {\r\n\r\n  pageChangedOnUrl() {\r\n    let value = queryString.parse(this.props.location.search);\r\n    let currentPage = Number(value.page)\r\n    if (!currentPage) {\r\n      currentPage = this.props.state.currentPage\r\n      this.props.history.push(`/users?page=${currentPage}`)\r\n      this.props.requestUsers(currentPage, this.props.state.pageSize)\r\n    }\r\n    // this.props.setCurrentPage(currentPage)\r\n    this.props.requestUsers(currentPage, this.props.state.pageSize)\r\n  }\r\n\r\n  onPageChanged = (page) => {\r\n    // this.props.requestUsers(page.selected, this.props.state.pageSize)\r\n    this.props.history.push(`/users?page=${page}`)\r\n  }\r\n\r\n  componentDidMount() {\r\n    // this.props.toggleIsFetching(true)\r\n    // usersAPI.requestUsers(this.props.state.currentPage, this.props.state.pageSize).then(data => {\r\n    //   this.props.setUsers(data.items)\r\n    //   this.props.setTotalCount(data.totalCount)\r\n    //   this.props.toggleIsFetching(false)\r\n    // });\r\n    // this.props.requestUsers(this.props.state.currentPage, this.props.state.pageSize)\r\n    this.pageChangedOnUrl()\r\n  }\r\n\r\n  componentDidUpdate(prevProps, prevState) {\r\n    let value = queryString.parse(this.props.location.search);\r\n    let currentPage = value.page\r\n    let prevValue = queryString.parse(prevProps.location.search);\r\n    let prevPage = prevValue.page\r\n    if (currentPage !== prevPage) {\r\n      this.pageChangedOnUrl()\r\n    }\r\n  }\r\n\r\n\r\n  // let users = props.state.users.map(u =>\r\n  //   <User id={u.id} photo_small={u.photos.small} key={u.id} name={u.name} followed={u.followed} status={u.status} unfollowUser={props.unfollowUser} followUser={props.followUser} />)\r\n  // <User id={u.id} photo_small={u.photo.small} key={u.id} name={u.name} followed={u.followed} status={u.status} location={u.location} unfollowUser={props.unfollowUser} followUser={props.followUser} />)\r\n\r\n  render() {\r\n    return <Users\r\n      state={this.props.state}\r\n      onPageChanged={this.onPageChanged}\r\n      followUser={this.props.followUser}\r\n      unfollowUser={this.props.unfollowUser}\r\n      followingInProgress={this.props.followingInProgress}\r\n    />\r\n  }\r\n}\r\n\r\nlet mapStateToProps = (state) => {\r\n  return (\r\n    { state: state.usersPage }\r\n  )\r\n}\r\n\r\n// let mapDispatchToProps = (dispatch) => {\r\n//   return (\r\n//     {\r\n//       followUser: (userId) => {\r\n//         dispatch(followUserAC(userId))\r\n//       },\r\n//       unfollowUser: (userId) => {\r\n//         dispatch(unfollowUserAC(userId))\r\n//       },\r\n//       setUsers: (users) => {\r\n//         dispatch(setUsersAC(users))\r\n//       },\r\n//       setCurrentPage: (page) => {\r\n//         dispatch(setCurrentPageAC(page))\r\n//       },\r\n//       setTotalCount: (number) => {\r\n//         dispatch(setTotalCountAC(number))\r\n//       },\r\n//       toggleIsFetching: (IsFetching) => {\r\n//         dispatch(toggleIsFetchingAC(IsFetching))\r\n//       },\r\n//     }\r\n//   )\r\n// }\r\n\r\nlet mapDispatchToProps = {\r\n  followUser,\r\n  unfollowUser,\r\n  requestUsers,\r\n  setCurrentPage,\r\n}\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(withRouter(UsersContainer))\r\n"],"sourceRoot":""}